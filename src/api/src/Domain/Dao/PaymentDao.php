<?php
/*
 * This file has been automatically generated by TDBM.
 * You can edit this file as it will not be overwritten.
 */

declare(strict_types=1);

namespace App\Domain\Dao;

use App\Domain\Dao\Generated\BasePaymentDao;
use App\Domain\Enum\Filter\SortOrder;
use App\Domain\Enum\Filter\UsersSortBy;
use App\Domain\Enum\Role;
use App\Domain\Model\Proxy\PasswordProxy;
use App\Domain\Model\Payment;
use App\Domain\Throwable\InvalidModel;
use Symfony\Component\Validator\Validator\ValidatorInterface;
use TheCodingMachine\GraphQLite\Annotations\Factory;
use TheCodingMachine\GraphQLite\Annotations\HideParameter;
use TheCodingMachine\TDBM\ResultIterator;
use TheCodingMachine\TDBM\TDBMException;
use TheCodingMachine\TDBM\TDBMService;

/**
 * The PaymentDao class will maintain the persistence of Payment class into the payments table.
 */
class PaymentDao extends BasePaymentDao
{
    private ValidatorInterface $validator;

    public function __construct(TDBMService $tdbmService, ValidatorInterface $validator)
    {
        $this->validator = $validator;
        parent::__construct(tdbmService: $tdbmService);
    }

    /**
     * @throws TDBMException
     *
     * @Factory
     * @HideParameter(for="$lazyLoading")
     */
    public function getById(string $id, bool $lazyLoading = false): Payment
    {
        return parent::getById(id: $id, lazyLoading: $lazyLoading);
    }

    /**
     * @throws InvalidModel
     */
    public function validate(Payment $payment): void
    {
        $violations = $this->validator->validate($payment);
        InvalidModel::throwException($violations);
    }

    /**
     * @throws InvalidModel
     *
     * @noinspection PhpParameterNameChangedDuringInheritanceInspection
     */
    public function save(Payment $payment): void
    {
        parent::save($payment);
    }

    /**
     * @return String
     */
    public function updateLocalization($locationArr): String
    {
        return $this->getAddressFromLatLon($locationArr);
    }

    public function getAddressFromLatLon($locationArr) {
        [ $latitude, $longitude ] = $locationArr;
        // Build the URL for the Nominatim API request
        $url = "https://nominatim.openstreetmap.org/reverse?format=json&lat={$latitude}&lon={$longitude}&zoom=18&addressdetails=1";
        
        // Initialize cURL session
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        
        // Execute the cURL request
        $response = curl_exec($ch);
        curl_close($ch);
        
        // Decode the JSON response
        $data = json_decode($response, true);
        
        // Check if an address was found
        if (isset($data['display_name'])) {
            return $data['display_name'];
        }
        return "Address not found";
    }

    /**
     * @return Payment[]|ResultIterator
     */
    public function search(
        ?string $search = null,
        $sortBy = null,
        ?SortOrder $sortOrder = null
    ): ResultIterator {
        $sortBy    = 'AMOUNT';
        $sortOrder = $sortOrder ?: SortOrder::ASC();

        return $this->find(
            [
                'amount LIKE :search OR label LIKE :search',
            ],
            [
                'search' => '%' . $search . '%',
            ],
            $sortBy . ' ' . $sortOrder
        );
    }
}
