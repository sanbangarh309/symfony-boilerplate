<?php
/**
 * This file has been automatically generated by TDBM.
 *
 * DO NOT edit this file, as it might be overwritten.
 * If you need to perform changes, edit the Payment class instead!
 */

declare(strict_types=1);

namespace App\Domain\Model\Generated;

use App\Domain\Model\User;
use TheCodingMachine\TDBM\AbstractTDBMObject;
use TheCodingMachine\TDBM\ResultIterator;
use TheCodingMachine\TDBM\AlterableResultIterator;
use Ramsey\Uuid\Uuid;
use JsonSerializable;
use TheCodingMachine\TDBM\Schema\ForeignKeys;
use TheCodingMachine\GraphQLite\Annotations\Field as GraphqlField;

/**
 * The BasePayment class maps the 'payments' table in database.
 */
abstract class BasePayment extends \TheCodingMachine\TDBM\AbstractTDBMObject implements JsonSerializable
{
    /**
     * @var \TheCodingMachine\TDBM\Schema\ForeignKeys
     */
    private static $foreignKeys = null;

    /**
     * The constructor takes all compulsory arguments.
     *
     * @param \App\Domain\Model\User $user
     * @param float $amount
     * @param string $label
     * @param \DateTimeImmutable $createdAt
     */
    public function __construct(\App\Domain\Model\User $user, float $amount, string $label, \DateTimeImmutable $createdAt)
    {
        parent::__construct();
        $this->setUser($user);
        $this->setAmount($amount);
        $this->setLabel($label);
        $this->setCreatedAt($createdAt);
        $this->setId(Uuid::uuid1()->toString());
    }

    /**
     * The getter for the "id" column.
     *
     * @return string
     */
    public function getId() : string
    {
        return $this->get('id', 'payments');
    }

    /**
     * The setter for the "id" column.
     *
     * @param string $id
     */
    public function setId(string $id) : void
    {
        $this->set('id', $id, 'payments');
    }

    /**
     * Returns the User object bound to this object via the user_id column.
     */
    public function getUser() : \App\Domain\Model\User
    {
        return $this->getRef('from__user_id__to__table__users__columns__id', 'payments', \App\Domain\Model\User::class, \App\Domain\ResultIterator\UserResultIterator::class);
    }

    /**
     * The setter for the User object bound to this object via the user_id column.
     */
    public function setUser(\App\Domain\Model\User $object) : void
    {
        $this->setRef('from__user_id__to__table__users__columns__id', $object, 'payments', \App\Domain\Model\User::class, \App\Domain\ResultIterator\UserResultIterator::class);
    }

    /**
     * The getter for the "amount" column.
     *
     * @return float
     */
    public function getAmount() : float
    {
        return $this->get('amount', 'payments');
    }

    /**
     * The setter for the "amount" column.
     *
     * @param float $amount
     */
    public function setAmount(float $amount) : void
    {
        $this->set('amount', $amount, 'payments');
    }

    /**
     * The getter for the "label" column.
     *
     * @return string
     */
    public function getLabel() : string
    {
        return $this->get('label', 'payments');
    }

    /**
     * The setter for the "label" column.
     *
     * @param string $label
     */
    public function setLabel(string $label) : void
    {
        $this->set('label', $label, 'payments');
    }

    /**
     * The getter for the "latitude" column.
     *
     * @return string|null
     */
    public function getLatitude() : ?string
    {
        return $this->get('latitude', 'payments');
    }

    /**
     * The setter for the "latitude" column.
     *
     * @param string|null $latitude
     */
    public function setLatitude(?string $latitude) : void
    {
        $this->set('latitude', $latitude, 'payments');
    }

    /**
     * The getter for the "longitude" column.
     *
     * @return string|null
     */
    public function getLongitude() : ?string
    {
        return $this->get('longitude', 'payments');
    }

    /**
     * The setter for the "longitude" column.
     *
     * @param string|null $longitude
     */
    public function setLongitude(?string $longitude) : void
    {
        $this->set('longitude', $longitude, 'payments');
    }

    /**
     * The getter for the "localization" column.
     *
     * @return string|null
     */
    public function getLocalization() : ?string
    {
        return $this->get('localization', 'payments');
    }

    /**
     * The setter for the "localization" column.
     *
     * @param string|null $localization
     */
    public function setLocalization(?string $localization) : void
    {
        $this->set('localization', $localization, 'payments');
    }

    /**
     * The getter for the "created_at" column.
     *
     * @return \DateTimeImmutable
     */
    public function getCreatedAt() : \DateTimeImmutable
    {
        return $this->get('created_at', 'payments');
    }

    /**
     * The setter for the "created_at" column.
     *
     * @param \DateTimeImmutable $createdAt
     */
    public function setCreatedAt(\DateTimeImmutable $createdAt) : void
    {
        $this->set('created_at', $createdAt, 'payments');
    }

    /**
     * The getter for the "updated_at" column.
     *
     * @return \DateTimeImmutable|null
     */
    public function getUpdatedAt() : ?\DateTimeImmutable
    {
        return $this->get('updated_at', 'payments');
    }

    /**
     * The setter for the "updated_at" column.
     *
     * @param \DateTimeImmutable|null $updatedAt
     */
    public function setUpdatedAt(?\DateTimeImmutable $updatedAt) : void
    {
        $this->set('updated_at', $updatedAt, 'payments');
    }

    /**
     * Internal method used to retrieve the list of foreign keys attached to this bean.
     */
    protected static function getForeignKeys(string $tableName) : \TheCodingMachine\TDBM\Schema\ForeignKeys
    {
        if ($tableName === 'payments') {
            if (self::$foreignKeys === null) {
                self::$foreignKeys = new ForeignKeys([
                    'from__user_id__to__table__users__columns__id' => [
                        'foreignTable' => 'users',
                        'localColumns' => [
                            'user_id'
                        ],
                        'foreignColumns' => [
                            'id'
                        ]
                    ]
                ]);
            }
            return self::$foreignKeys;
        }
        return parent::getForeignKeys($tableName);
    }

    /**
     * Serializes the object for JSON encoding.
     *
     * @param bool $stopRecursion Parameter used internally by TDBM to stop embedded
     * objects from embedding other objects.
     * @return array
     */
    public function jsonSerialize(bool $stopRecursion = false)
    {
        $array = [];
        $array['id'] = $this->getId();
        if ($stopRecursion) {
            $array['user'] = ['id' => $this->getUser()->getId()];
        } else {
            $array['user'] = $this->getUser()->jsonSerialize(true);
        }
        $array['amount'] = $this->getAmount();
        $array['label'] = $this->getLabel();
        $array['latitude'] = $this->getLatitude();
        $array['longitude'] = $this->getLongitude();
        $array['localization'] = $this->getLocalization();
        $array['createdAt'] = $this->getCreatedAt()->format('c');
        $array['updatedAt'] = ($date = $this->getUpdatedAt()) ? $date->format('c') : null;
        return $array;
    }

    /**
     * Returns an array of used tables by this bean (from parent to child
     * relationship).
     *
     * @return string[]
     */
    public function getUsedTables() : array
    {
        return [ 'payments' ];
    }

    /**
     * Method called when the bean is removed from database.
     */
    public function onDelete() : void
    {
        parent::onDelete();
        $this->setRef('from__user_id__to__table__users__columns__id', null, 'payments', \App\Domain\Model\User::class, \App\Domain\ResultIterator\UserResultIterator::class);
    }

    public function __clone()
    {
        parent::__clone();
        $this->setId(Uuid::uuid1()->toString());
    }
}
